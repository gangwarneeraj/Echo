package sdslabs.echo.indexing

import java.io.File
import org.apache.tika.metadata.DublinCore
import java.io.InputStream
import java.io.FileInputStream
import org.apache.tika.parser.Parser
import org.apache.tika.parser.AutoDetectParser
import org.apache.tika.parser.ParseContext
import org.apache.tika.metadata.Metadata
import org.apache.tika.sax.BodyContentHandler
import org.xml.sax.ContentHandler
import java.net.URL
import java.io.BufferedReader
import java.io.InputStreamReader
import java.nio.charset.Charset
import scala.collection.immutable._
import org.json.simple.JSONObject
import org.json.simple.JSONValue
import org.json.simple.JSONArray
import java.util.UUID
import scala.collection.JavaConversions._
import java.io.StringWriter
import java.io.FileWriter
import java.io.BufferedWriter
import com.mongodb.Mongo
import com.mongodb.DB
import com.mongodb.DBCollection
import com.mongodb.BasicDBObject
import java.util.LinkedHashMap
import sdslabs.echo.utils._
import sdslabs.echo.mongo._
import java.sql.Connection
import java.sql.Statement
import java.sql.PreparedStatement
import java.sql.ResultSet
import java.sql.DriverManager

class EchoExtraction {
  
  private val mongo : EchoMongo = new EchoMongo()
  
  
  def getTitle(f : File) : String = {
    var title_field : String = DublinCore.TITLE   
    var stream : InputStream = new FileInputStream(f)            
    var parser : Parser = new AutoDetectParser()                
    var handler : ContentHandler = new BodyContentHandler(-1)   
    var context : ParseContext = new ParseContext()   
    context.set(classOf[Parser], parser)    
    var metadata : Metadata = new Metadata()     
    try {
       parser.parse(stream, handler, metadata, context)
    } 
    finally {
            stream.close()
    }
    var title : String = new String("")
    metadata.names foreach ( name => {
    if(name.compareTo(title_field) == 0 )    {
           title = metadata.get(name)
    }  
    })    
    return title.toLowerCase()
  }
  
  
  def searchGoogle(_echofile : EchoFileInfo) : Map[String, String] = {
    var str : String = _echofile.bookName
    var query = getFromSQL("")
    var map : Map[String, String] = new HashMap[String, String]()
   // var uuid = UUID.randomUUID()
    var uuid : String = _echofile.getBookName()
    try {
      var url : String = Settings.getGoogleURL(query)
      var json_object : JSONObject = getJSONObject(url)
      /*json will be a json file containing all the books and their information.
       *Now, json.get("items") will give us information of all the book in form of string
       *We take first book considering it to be the best result and then extract information from there. */
      var item : String = json_object.get("items").toString
      var json_object_allbooks : JSONArray = JSONValue.parse(item).asInstanceOf[JSONArray]
      var temp_json_book : JSONObject = getMatchedBook(json_object_allbooks)
      var selflink : String = temp_json_book.get("selfLink").toString()
      var json_book : JSONObject = getJSONObject(Settings.getURL(selflink))
      println(selflink)
      map = extractJSON(json_book)
      map += ("localFileName" -> (Settings.getLocalFileName(str)))
      map += "uuid" -> uuid.toString
      map += "name" -> str  
      map += "downloadLink" -> ("192.168.208.198/ebook/books/" + uuid)
    }
    mongo.storeInfo(map)
    return map
  }
  
  def getJSONObject(url : String) : JSONObject = {
    var is : InputStream = new URL(url).openStream()
    var rd : BufferedReader = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")))
    var sb : StringBuilder = new StringBuilder()
    var cp : Int = 0
    cp = rd.read()
    while (cp != -1) {
      sb.append(cp.asInstanceOf[Char])
      cp = rd.read()
    }
    var json : JSONObject = JSONValue.parse(sb.toString()).asInstanceOf[JSONObject]
    return json
  }
  
  def extractJSON(json : JSONObject) : Map[String, String] = {
    var map : Map[String, String] = new HashMap[String, String]()
    var str : String = json.get("volumeInfo").toString() //information is stored in volume info
    var json_volumeinfo : JSONObject = JSONValue.parse(str).asInstanceOf[JSONObject]
    var keyset : java.util.Set[String] = json_volumeinfo.keySet().asInstanceOf[java.util.Set[String]]
    var iter : java.util.Iterator[String] = keyset.iterator()
    while(iter.hasNext()) {
      var tempKey : String = iter.next()
      if(tempKey == "industryIdentifiers") {
        var ISBNJson : JSONArray = JSONValue.parse(json_volumeinfo.get(tempKey).toString()).asInstanceOf[JSONArray]
        for(i <- 0 to 1) {
          var tempJStrISBN : String = ISBNJson.get(i).toString()
          var tempJObjISBN : JSONObject = JSONValue.parse(tempJStrISBN).asInstanceOf[JSONObject]
          map+= tempJObjISBN.get("type").toString() -> tempJObjISBN.get("identifier").toString()
        }
      } else if(tempKey == "imageLinks") {
        var imageStr = json_volumeinfo.get(tempKey) 
        var imageJSON : JSONObject = JSONValue.parse(imageStr.toString()).asInstanceOf[JSONObject]
        var keyset_image : java.util.Set[String] = imageJSON.keySet().asInstanceOf[java.util.Set[String]]
        var iter_image = keyset_image.iterator()
        while(iter_image.hasNext()) {
          var tempKey_image = iter_image.next()
          map += tempKey_image -> imageJSON.get(tempKey_image).toString()
        }    
      } else {
        var tempJsonString : String = json_volumeinfo.get(tempKey).toString()
        map += tempKey -> tempJsonString    
      }      		
    }
    return map
  }
  
  def getInfo(str : EchoFileInfo) : Map[String, String] = {
    var map : Map[String, String] = new HashMap[String, String]()
    map = searchGoogle(str)
    return map
  }
  
  def getFromSQL(str : String) : String = {
   // var uuid : String = file.getBookName().replaceAll("." + file.getExtension(), "")
    var uuid = str.replaceAll("." + str.split('.').last, "")
    var connect : Connection = null
    var statement : Statement = null
    var preparedStatement : PreparedStatement = null
    var resultSet : ResultSet = null
    Class.forName("com.mysql.jdbc.Driver")
    connect = DriverManager.getConnection("jdbc:mysql://192.168.208.198/?"+ "user=ebook&password=eb00k") // pending
    statement = connect.createStatement()
    resultSet = statement.executeQuery("select * from ebook.ebooks where MD5 = '" + uuid.toUpperCase() +"'")
    var result : String = ""
    var d = true
    while(resultSet.next()) {
   /*   println(resultSet.getString("OpenLibraryID")) 
        result = resultSet.getString("Identifier").split(",").first.replaceAll("-", "")
        if(result.length() == 0)
        	result = resultSet.getString("Title")
        if(result.length() == 0) {*/
          var openlibid = resultSet.getString("OpenLibraryID")
          println(openlibid)
          var json : JSONObject = getJSONObject("http://openlibrary.org/api/volumes/brief/json/olid:" + openlibid)
          var json_1 : JSONObject = JSONValue.parse(json.get("olid:" + openlibid).toString()).asInstanceOf[JSONObject]
          var json_2 : JSONObject = JSONValue.parse(json_1.get("records").toString()).asInstanceOf[JSONObject]
          println(json_1)
       // } 	
    }
    println(str + " " + result)
    return result
  }
  
  def getMatchedBook(json : JSONArray) : JSONObject = JSONValue.parse(json.get(0).toString()).asInstanceOf[JSONObject]
 
  

}